version: 0.2
env:
  secrets-manager:
    # SNYK_AUTH_TOKEN: $SNYK_TOKEN_ARN:SNYK_TOKEN
    SNYK_TOKEN: $SNYK_TOKEN_ARN:SNYK_TOKEN
phases:
  pre_build:
    commands:
      # Logging into ECR
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      # # Install Snyk on runner
      # - echo Install Snyk
      # - curl -Lo ./snyk "https://github.com/snyk/snyk/releases/download/v1.1039.0/snyk-linux"
      # - chmod -R +x ./snyk
      # # Configure Snyk auth
      # - ./snyk config set api="$SNYK_AUTH_TOKEN"
  build:
    on-failure: CONTINUE
    commands:
      # Building app docker image
      - echo Build started on `date`
      # print out current working directory
      # - echo $PWD
      # print out SNYK TOKEN
      # - echo $SNYK_TOKEN
      - echo Building the Docker image...
      - export timestamp=$(date +%Y%m%d%H%M%S)
      - docker build -t $IMAGE_REPO_NAME:$timestamp .
      - docker tag $IMAGE_REPO_NAME:$timestamp $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$timestamp
      # sca
      - docker run --rm --env SNYK_TOKEN -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/app snyk/snyk:docker snyk test --docker $IMAGE_REPO_NAME:$timestamp --severity-threshold=critical --json-file-output=/app/sca_vuln.json; exit_code_sca=$?; exit 0
      - echo $exit_code_sca
      # sast
      - docker run --rm --env SNYK_TOKEN -v $PWD:/app snyk/snyk:docker snyk code test --json-file-output=/app/sast_vuln.json; exit 0
      - ls
      # Steps for DAST scan using OWASP ZAP
      # Scan app docker image with Snyk
      # - ./snyk test --severity-threshold=medium --docker $IMAGE_REPO_NAME:$timestamp --file=./Dockerfile --app-vulns --exclude-base-image-vulns
      # - ./snyk container test $IMAGE_REPO_NAME:$timestamp --file=./Dockerfile --app-vulns --exclude-base-image-vulns
      # - pwd
      # - ls
      # - ./snyk --help
      # # Testing code quality
      # - ./snyk code test --severity-threshold=high
  post_build:
    commands:
      - echo SCA scan reports to S3 for record keeping
      - aws s3 cp sca_vuln.json s3://poc-mc-devsecops-reports/$IMAGE_REPO_NAME/sca/sca_$IMAGE_REPO_NAME_$timestamp.json
      - echo generating a pre-signed url for sharing later
      - PRESIGNED_URL_SCA=$(aws s3 presign s3://poc-mc-devsecops-reports/$IMAGE_REPO_NAME/sca/sca_$IMAGE_REPO_NAME_$timestamp.json)

      - echo SAST scan reports to S3 for record keeping
      - aws s3 cp sast_vuln.json s3://poc-mc-devsecops-reports/$IMAGE_REPO_NAME/sast/sast_$IMAGE_REPO_NAME_$timestamp.json
      - echo generating a pre-signed url for sharing later
      - PRESIGNED_URL_SAST=$(aws s3 presign s3://poc-mc-devsecops-reports/$IMAGE_REPO_NAME/sast/sast_$IMAGE_REPO_NAME_$timestamp.json)




      - echo Sending pre-signed URL to Slack...
      - >- 
        curl -X POST -H 'Content-type:application/json' --data "{\"text\": \"SCA Report of ${IMAGE_REPO_NAME}:${timestamp} ${PRESIGNED_URL_SCA}\"}" $SLACK_WEBHOOK
      - >- 
        curl -X POST -H 'Content-type:application/json' --data "{\"text\": \"SAST Report of ${IMAGE_REPO_NAME}:${timestamp} ${PRESIGNED_URL_SAST}\"}" $SLACK_WEBHOOK
      # - echo The pre-signed URL is $PRESIGNED_URL
      # - echo SAST scan reports to S3 for record keeping
      # - aws s3 cp sast_vuln.json s3://poc-mc-devsecops-reports/$IMAGE_REPO_NAME/sast/sast_$IMAGE_REPO_NAME_$timestamp.json
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$timestamp
      # - echo deploy to Lambda
      # - aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$timestamp
      # - echo finished execution
      # Fully integrated with CodePipeline and CodeBuild; deploy the image to ECR and pulled down by Lambda
      # Python code credentials had been replaced with environment variables